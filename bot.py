import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7968236729:AAEIaSxTlST7D-BbazdXcyCwSj3lBCnuQ1c"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = [7353415682 , 8030716815]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å–∏–≥–Ω—ã, –∏ –º—ã –≤—ã–ª–æ–∂–∏–º –µ–≥–æ –≤ @SignaReytzov.\n\n"
        "–ë–æ—Ç –Ω–µ –ò–ò, –∞ –µ–≥–æ –∞–¥–º–∏–Ω—ã –Ω–µ –¥–µ–ª–∞—é—Ç —Å–∏–≥–Ω—ã."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(F.chat.id.not_in(ADMINS))
async def forward_user_message(message: Message):
    for admin_id in ADMINS:
        try:
            builder = InlineKeyboardBuilder()
            builder.button(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}")
            
            await message.send_copy(
                admin_id,
                reply_markup=builder.as_markup()
            )
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query(F.data.startswith("reply_"))
async def process_admin_reply(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await callback.answer()
    await callback.message.answer(f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):")
    dp["reply_mode"] = user_id  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ ID

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(F.chat.id.in_(ADMINS))
async def handle_admin_message(message: Message):
    if "reply_mode" in dp and dp["reply_mode"]:
        user_id = dp["reply_mode"]
        try:
            await message.send_copy(user_id)
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            del dp["reply_mode"]
    
    # –ö–æ–º–∞–Ω–¥–∞ /admins
    elif message.text and message.text.startswith("/admins"):
        if len(message.text.split()) > 1:
            try:
                new_admin = int(message.text.split()[1])
                if new_admin not in ADMINS:
                    ADMINS.append(new_admin)
                    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {new_admin}")
                else:
                    await message.answer("‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")
            except ValueError:
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        else:
            admins_list = "\n".join(str(admin) for admin in ADMINS)
            await message.answer(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n{admins_list}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())



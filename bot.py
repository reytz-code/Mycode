import os
import logging
import json
from datetime import datetime, timedelta
from typing import Optional
import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    LabeledPrice, PreCheckoutQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import psycopg2
from psycopg2 import sql

from flask import Flask
from threading import Thread
import requests
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
BOT_TOKEN = "7968236729:AAFBi3ma_p43qRQ_O7E9csOoTchJ6K2UlzI"
ADMIN_IDS = [7353415682]
SUPPORT_ID = "@ReSigncf"
CHANNEL_ID = -1002850774775
DATABASE_URL = "postgresql://signdb_user:fqxpUJ3VUykQtz8CZD4Ghoijpsu0uoWn@dpg-d21vmg3e5dus73955mj0-a/signdb"
RENDER_APP_NAME = "Mycode-1"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TakeStates(StatesGroup):
    waiting_for_payment = State()
    waiting_for_content = State()
    waiting_for_edit = State()

class AdminStates(StatesGroup):
    waiting_for_broadcast = State()
    waiting_for_premium_days = State()
    waiting_for_premium_username = State()

# ===================== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====================
def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    commands = (
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            is_admin BOOLEAN DEFAULT FALSE,
            join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """,
        """
        CREATE TABLE IF NOT EXISTS payments (
            payment_id SERIAL PRIMARY KEY,
            user_id BIGINT,
            amount INTEGER,
            currency TEXT,
            status TEXT,
            payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
        """,
        """
        CREATE TABLE IF NOT EXISTS takes (
            take_id SERIAL PRIMARY KEY,
            user_id BIGINT,
            content_type TEXT,
            content TEXT,
            file_id TEXT,
            status TEXT DEFAULT 'pending',
            admin_id BIGINT,
            rating_change INTEGER DEFAULT 0,
            submission_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id),
            FOREIGN KEY (admin_id) REFERENCES users (user_id)
        )
        """,
        """
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id BIGINT PRIMARY KEY,
            takes_count INTEGER DEFAULT 0,
            rating INTEGER DEFAULT 0,
            premium_until TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
        """
    )
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        for command in commands:
            cursor.execute(command)
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        logger.error(f"Error initializing database: {e}")

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
def add_user(user_id: int, username: Optional[str], full_name: str, is_admin: bool = False):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO users (user_id, username, full_name, is_admin) VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING",
            (user_id, username, full_name, is_admin)
        )
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        logger.error(f"Error adding user: {e}")

def get_user_stats(user_id: int) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT u.user_id, u.username, u.full_name, 
               COALESCE(us.takes_count, 0) as takes_count, 
               COALESCE(us.rating, 0) as rating,
               us.premium_until
        FROM users u
        LEFT JOIN user_stats us ON u.user_id = us.user_id
        WHERE u.user_id = %s
        ''', (user_id,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if result:
            return {
                "user_id": result[0],
                "username": result[1],
                "full_name": result[2],
                "takes_count": result[3],
                "rating": result[4],
                "premium_until": result[5]
            }
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
    return None

def get_user_by_username(username: str) -> Optional[dict]:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT user_id, username, full_name 
        FROM users 
        WHERE username = %s
        ''', (username.lower().replace("@", ""),))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if result:
            return {
                "user_id": result[0],
                "username": result[1],
                "full_name": result[2]
            }
    except Exception as e:
        logger.error(f"Error getting user by username: {e}")
    return None

async def add_premium(user_id: int, days: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT premium_until FROM user_stats WHERE user_id = %s", (user_id,))
        current_premium = cursor.fetchone()
        
        if current_premium and current_premium[0]:
            new_date = current_premium[0] + timedelta(days=days)
        else:
            new_date = datetime.now() + timedelta(days=days)
        
        cursor.execute('''
        INSERT INTO user_stats (user_id, premium_until) 
        VALUES (%s, %s)
        ON CONFLICT (user_id) DO UPDATE 
        SET premium_until = %s
        ''', (user_id, new_date, new_date))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        try:
            await bot.send_message(
                user_id,
                f"üéâ –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π!\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–æ: {new_date.strftime('%d.%m.%Y %H:%M')}"
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–º–∏—É–º–µ: {e}")
            return False
    except Exception as e:
        logger.error(f"Error adding premium: {e}")
        return False

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def get_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    is_admin = user_id in ADMIN_IDS
    
    builder = ReplyKeyboardBuilder()
    buttons = [
        KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–π–∫"),
        KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥"),
        KeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    ]
    
    if is_admin:
        buttons.append(KeyboardButton(text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    
    builder.add(*buttons)
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup(resize_keyboard=True)

def get_admin_menu() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
        KeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_take_action_keyboard(take_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–π–∫–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{take_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{take_id}"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{take_id}")
    )
    return builder.as_markup()

def get_payment_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 15 Stars", pay=True)
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
    builder.adjust(1)
    return builder.as_markup()

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    is_admin = user_id in ADMIN_IDS
    
    add_user(user_id, username, full_name, is_admin)
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ç–µ–π–∫–æ–≤!\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏ –º—ã—Å–ª–∏, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_main_menu(user_id)
    )

@dp.message(Command("id"))
async def cmd_id(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer(f"–í–∞—à ID: `{message.from_user.id}`", parse_mode="Markdown")

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu(message.from_user.id)
    )

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:",
            reply_markup=get_admin_menu()
        )
    else:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_menu(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AdminStates.waiting_for_broadcast)

@dp.message(AdminStates.waiting_for_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        cursor.close()
        conn.close()
    except Exception as e:
        logger.error(f"Error getting users for broadcast: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        await state.clear()
        return

    success = failed = 0
    for user in users:
        try:
            await bot.copy_message(
                chat_id=user[0],
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user[0]}: {e}")
            failed += 1

    await message.answer(
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        reply_markup=get_admin_menu()
    )
    await state.clear()

@dp.message(F.text == "üéÅ –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º")
async def give_premium_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_for_premium_days)

@dp.message(AdminStates.waiting_for_premium_days)
async def process_premium_days(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞"""
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π!")
        return
    
    days = int(message.text)
    if days <= 0:
        await message.answer("‚ùå –ß–∏—Å–ª–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
        return
    
    await state.update_data(days=days)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_for_premium_username)

@dp.message(AdminStates.waiting_for_premium_username)
async def process_premium_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–µ–º–∏—É–º–∞"""
    data = await state.get_data()
    days = data['days']
    username = message.text.strip().replace("@", "")
    
    user = get_user_by_username(username)
    if not user:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_admin_menu()
        )
        await state.clear()
        return
    
    success = await add_premium(user['user_id'], days)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π!",
            reply_markup=get_admin_menu()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}",
            reply_markup=get_admin_menu()
        )
    
    await state.clear()

@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–π–∫")
async def send_take(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–π–∫–∞"""
    user_stats = get_user_stats(message.from_user.id)
    
    if user_stats and user_stats.get('premium_until') and datetime.now() < user_stats['premium_until']:
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–π–∫ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(TakeStates.waiting_for_content)
    else:
        await message.answer_invoice(
            title="–û–ø–ª–∞—Ç–∞ —Ç–µ–π–∫–∞",
            description="–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–æ–∏—Ç 15 Stars",
            provider_token="",  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Ç–æ–∫–µ–Ω
            currency="XTR",
            prices=[LabeledPrice(label="15 Stars", amount=15)],
            payload="take_payment",
            reply_markup=get_payment_keyboard()
        )
        await state.set_state(TakeStates.waiting_for_payment)

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    if pre_checkout_query.invoice_payload != "take_payment":
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
        )
        return
    
    if pre_checkout_query.total_amount != 15:
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"
        )
        return
    
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def process_payment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    user_id = message.from_user.id
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO payments (user_id, amount, currency, status) VALUES (%s, %s, %s, %s)",
            (user_id, payment.total_amount, payment.currency, "completed")
        )
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        logger.error(f"Error saving payment: {e}")
    
    await add_premium(user_id, 1)
    
    await message.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–π–∫ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(TakeStates.waiting_for_content)

@dp.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.message.edit_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu(callback.from_user.id)
    )

@dp.message(TakeStates.waiting_for_content, F.text | F.photo | F.video)
async def process_take_content(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–µ–π–∫–∞"""
    user_id = message.from_user.id
    content_type = "text" if message.text else "photo" if message.photo else "video"
    content = message.text or message.caption
    file_id = None
    
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.video:
        file_id = message.video.file_id
    
    take_id = add_take(user_id, content_type, content, file_id)
    
    if take_id == -1:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–π–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    for admin_id in ADMIN_IDS:
        try:
            if content_type == "text":
                await bot.send_message(
                    admin_id,
                    f"üìù –ù–æ–≤—ã–π —Ç–µ–π–∫ (ID: {take_id}):\n\n{content}",
                    reply_markup=get_take_action_keyboard(take_id)
                )
            else:
                if content_type == "photo":
                    await bot.send_photo(
                        admin_id,
                        photo=file_id,
                        caption=f"üì∏ –ù–æ–≤—ã–π —Ç–µ–π–∫ (ID: {take_id}):\n\n{content}" if content else None,
                        reply_markup=get_take_action_keyboard(take_id)
                    )
                else:
                    await bot.send_video(
                        admin_id,
                        video=file_id,
                        caption=f"üé• –ù–æ–≤—ã–π —Ç–µ–π–∫ (ID: {take_id}):\n\n{content}" if content else None,
                        reply_markup=get_take_action_keyboard(take_id)
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–π–∫–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await message.answer(
        "‚úÖ –¢–µ–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
        reply_markup=get_main_menu(user_id)
    )
    await state.clear()

@dp.callback_query(F.data.startswith("accept_"))
async def accept_take(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ —Ç–µ–π–∫–∞"""
    take_id = int(callback.data.split("_")[1])
    admin_id = callback.from_user.id
    
    update_take_status(take_id, "accepted", admin_id, 5)
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT t.user_id, t.content_type, t.content, t.file_id
        FROM takes t
        WHERE t.take_id = %s
        ''', (take_id,))
        take = cursor.fetchone()
        cursor.close()
        conn.close()
    except Exception as e:
        logger.error(f"Error fetching take: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return
    
    if take:
        user_id, content_type, content, file_id = take
        
        try:
            if content_type == "text":
                await bot.send_message(
                    CHANNEL_ID,
                    f"{content}"
                )
            else:
       

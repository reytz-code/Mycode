import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    LabeledPrice, PreCheckoutQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional
import sqlite3
from datetime import datetime, timedelta
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7968236729:AAFBi3ma_p43qRQ_O7E9csOoTchJ6K2UlzI"
ADMIN_IDS = [7353415682]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SUPPORT_ID = "@Oxoxece"  # –ù–æ–≤—ã–π –Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
CHANNEL_ID = -1002850774775  # ID –∫–∞–Ω–∞–ª–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "bot_database.db"

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT,
        is_admin BOOLEAN DEFAULT FALSE,
        join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payments (
        payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount INTEGER,
        currency TEXT,
        status TEXT,
        payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS takes (
        take_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        content_type TEXT,
        content TEXT,
        media_id TEXT,  # –ò–∑–º–µ–Ω–∏–ª media_path –Ω–∞ media_id
        status TEXT DEFAULT 'pending',
        admin_id INTEGER,
        rating_change INTEGER DEFAULT 0,
        submission_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id),
        FOREIGN KEY (admin_id) REFERENCES users (user_id)
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER PRIMARY KEY,
        takes_count INTEGER DEFAULT 0,
        rating INTEGER DEFAULT 0,
        premium_until TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )''')
    
    conn.commit()
    conn.close()

init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TakeStates(StatesGroup):
    waiting_for_payment = State()
    waiting_for_content = State()
    waiting_for_edit = State()

class AdminStates(StatesGroup):
    waiting_for_broadcast = State()
    waiting_for_premium_user = State()
    waiting_for_premium_days = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def get_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT is_admin FROM users WHERE user_id = ?", (user_id,))
    is_admin = cursor.fetchone()
    conn.close()
    
    builder = ReplyKeyboardBuilder()
    buttons = [
        KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–π–∫"),
        KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥"),
        KeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    ]
    
    if is_admin and is_admin[0]:
        buttons.append(KeyboardButton(text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    
    builder.add(*buttons)
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup(resize_keyboard=True)

def get_admin_menu() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º"),
        KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_take_action_keyboard(take_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{take_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{take_id}"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{take_id}")
    )
    return builder.as_markup()

def get_payment_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 15 Stars", pay=True)
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
    builder.adjust(1)
    return builder.as_markup()

# ===================== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====================
def add_user(user_id: int, username: Optional[str], full_name: str, is_admin: bool = False):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, full_name, is_admin) VALUES (?, ?, ?, ?)",
        (user_id, username, full_name, is_admin)
    )
    conn.commit()
    conn.close()

def get_user_stats(user_id: int) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    SELECT u.user_id, u.username, u.full_name, 
           COALESCE(us.takes_count, 0) as takes_count, 
           COALESCE(us.rating, 0) as rating,
           us.premium_until
    FROM users u
    LEFT JOIN user_stats us ON u.user_id = us.user_id
    WHERE u.user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return {
            "user_id": result[0],
            "username": result[1],
            "full_name": result[2],
            "takes_count": result[3],
            "rating": result[4],
            "premium_until": result[5]
        }
    return None

def add_take(user_id: int, content_type: str, content: Optional[str], media_id: Optional[str] = None) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–π–∫–∞"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO takes (user_id, content_type, content, media_id) VALUES (?, ?, ?, ?)",
        (user_id, content_type, content, media_id)
    )
    take_id = cursor.lastrowid
    
    cursor.execute('''
    INSERT OR IGNORE INTO user_stats (user_id, takes_count, rating) 
    VALUES (?, 0, 0)
    ''', (user_id,))
    
    cursor.execute('''
    UPDATE user_stats 
    SET takes_count = takes_count + 1 
    WHERE user_id = ?
    ''', (user_id,))
    
    conn.commit()
    conn.close()
    return take_id

def update_take_status(take_id: int, status: str, admin_id: int, rating_change: int = 0):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–π–∫–∞"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
    UPDATE takes 
    SET status = ?, admin_id = ?, rating_change = ?
    WHERE take_id = ?
    ''', (status, admin_id, rating_change, take_id))
    
    if status == 'accepted' and rating_change > 0:
        cursor.execute('''
        UPDATE user_stats 
        SET rating = rating + ?
        WHERE user_id = (SELECT user_id FROM takes WHERE take_id = ?)
        ''', (rating_change, take_id))
    
    conn.commit()
    conn.close()

async def add_premium(user_id: int, days: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute("SELECT premium_until FROM user_stats WHERE user_id = ?", (user_id,))
    current_premium = cursor.fetchone()
    
    new_date = (datetime.strptime(current_premium[0], "%Y-%m-%d %H:%M:%S") + timedelta(days=days) 
               if current_premium and current_premium[0] 
               else datetime.now() + timedelta(days=days))
    
    cursor.execute('''
    INSERT OR IGNORE INTO user_stats (user_id, premium_until) 
    VALUES (?, ?)
    ''', (user_id, new_date.strftime("%Y-%m-%d %H:%M:%S")))
    
    cursor.execute('''
    UPDATE user_stats 
    SET premium_until = ?
    WHERE user_id = ?
    ''', (new_date.strftime("%Y-%m-%d %H:%M:%S"), user_id))
    
    conn.commit()
    conn.close()
    
    try:
        await bot.send_message(
            user_id,
            f"üéâ –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π!\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–æ: {new_date.strftime('%d.%m.%Y %H:%M')}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–º–∏—É–º–µ: {e}")

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞"""
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    is_admin = user_id in ADMIN_IDS
    
    add_user(user_id, username, full_name, is_admin)
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ç–µ–π–∫–æ–≤!\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏ –º—ã—Å–ª–∏, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_main_menu(user_id)
    )

@dp.message(Command("id"))
async def cmd_id(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer(f"–í–∞—à ID: `{message.from_user.id}`", parse_mode="Markdown")

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu(message.from_user.id)
    )

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:",
            reply_markup=get_admin_menu()
        )
    else:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_menu(message: Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AdminStates.waiting_for_broadcast)

@dp.message(F.text == "üéÅ –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º")
async def give_premium_menu(message: Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AdminStates.waiting_for_premium_user)

@dp.message(AdminStates.waiting_for_premium_user)
async def process_premium_user(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AdminStates.waiting_for_premium_days)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message(AdminStates.waiting_for_premium_days)
async def process_premium_days(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        if days <= 0:
            raise ValueError
        
        data = await state.get_data()
        user_id = data['user_id']
        
        await add_premium(user_id, days)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π",
            reply_markup=get_admin_menu()
        )
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")

@dp.message(AdminStates.waiting_for_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()

    success = failed = 0
    for user in users:
        try:
            await bot.copy_message(
                chat_id=user[0],
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user[0]}: {e}")
            failed += 1

    await message.answer(
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        reply_markup=get_admin_menu()
    )
    await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM takes")
    total_takes = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM takes WHERE status = 'accepted'")
    accepted_takes = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM takes WHERE status = 'rejected'")
    rejected_takes = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM user_stats WHERE premium_until > datetime('now')")
    premium_users = cursor.fetchone()[0]
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    cursor.execute('''
    SELECT u.user_id, u.username, u.full_name, us.rating 
    FROM users u
    JOIN user_stats us ON u.user_id = us.user_id
    ORDER BY us.rating DESC
    LIMIT 10
    ''')
    top_users = cursor.fetchall()
    
    conn.close()
    
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üì§ –í—Å–µ–≥–æ —Ç–µ–π–∫–æ–≤: <b>{total_takes}</b>\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: <b>{accepted_takes}</b>\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{rejected_takes}</b>\n"
        f"‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{premium_users}</b>\n\n"
        "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    )
    
    for i, user in enumerate(top_users, 1):
        username = f"@{user[1]}" if user[1] else user[2]
        stats_text += f"{i}. {username}: {user[3]} ‚òÖ\n"
    
    await message.answer(stats_text)

@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–π–∫")
async def send_take(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–π–∫–∞"""
    user_stats = get_user_stats(message.from_user.id)
    
    if user_stats and user_stats.get('premium_until') and datetime.now() < datetime.strptime(user_stats['premium_until'], "%Y-%m-%d %H:%M:%S"):
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–π–∫ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(TakeStates.waiting_for_content)
    else:
        await message.answer_invoice(
            title="–û–ø–ª–∞—Ç–∞ —Ç–µ–π–∫–∞",
            description="–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–æ–∏—Ç 15 Stars",
            provider_token="",
            currency="XTR",
            prices=[LabeledPrice(label="15 Stars", amount=15)],
            payload="take_payment",
            reply_markup=get_payment_keyboard()
        )
        await state.set_state(TakeStates.waiting_for_payment)

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    if pre_checkout_query.invoice_payload != "take_payment":
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
        )
        return
    
    if pre_checkout_query.total_amount != 15:
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"
        )
        return
    
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def process_payment(message: Message, state: FSMContext):
    payment = message.successful_payment
    user_id = message.from_user.id
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO payments (user_id, amount, currency, status) VALUES (?, ?, ?, ?)",
        (user_id, payment.total_amount, payment.currency, "completed")
    )
    conn.commit()
    conn.close()
    
    await add_premium(user_id, 1)
    
    await message.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–π–∫ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(TakeStates.waiting_for_content)

@dp.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu(callback.from_user.id)
    )

@dp.message(TakeStates.waiting_for_content, F.text | F.photo | F.video)
async def process_take_content(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–µ–π–∫–∞"""
    user_id = message.from_user.id
    content_type = "text" if message.text else "photo" if message.photo else "video"
    content = message.text or message.caption
    media_id = None
    
    if message.photo:
        media_id = message.photo[-1].file_id
    elif message.video:
        media_id = message.video.file_id
    
    take_id = add_take(user_id, content_type, content, media_id)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    for admin_id in ADMIN_IDS:
        try:
            if content_type == "text":
                await bot.send_message(
                    admin_id,
                    f"üìù –ù–æ–≤—ã–π —Ç–µ–π–∫ (ID: {take_id}):\n\n{content}",
                    reply_markup=get_take_action_keyboard(take_id)
                )
            elif content_type == "photo":
                await bot.send_photo(
                    admin_id,
                    photo=media_id,
                    caption=f"üì∏ –ù–æ–≤—ã–π —Ç–µ–π–∫ (ID: {take_id}):\n\n{content}" if content else None,
                    reply_markup=get_take_action_keyboard(take_id)
                )
            elif content_type == "video":
                await bot.send_video(
                    admin_id,
                    video=media_id,
                    caption=f"üé• –ù–æ–≤—ã–π —Ç–µ–π–∫ (ID: {take_id}):\n\n{content}" if content else None,
                    reply_markup=get_take_action_keyboard(take_id)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–π–∫–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await message.answer(
        "‚úÖ –¢–µ–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
        reply_markup=get_main_menu(user_id)
    )
    await state.clear()

@dp.callback_query(F.data.startswith("accept_"))
async def accept_take(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ —Ç–µ–π–∫–∞ –±–µ–∑ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞"""
    take_id = int(callback.data.split("_")[1])
    admin_id = callback.from_user.id
    
    update_take_status(take_id, "accepted", admin_id, 5)
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    SELECT t.user_id, t.content_type, t.content, t.media_id
    FROM takes t
    WHERE t.take_id = ?
    ''', (take_id,))
    take = cursor.fetchone()
    conn.close()
    
    if take:
        user_id, content_type, content, media_id = take
        
        try:
            if content_type == "text":
                await bot.send_message(
                    CHANNEL_ID,
                    f"{content}"  # –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç
                )
            elif content_type == "photo":
                await bot.send_photo(
                    CHANNEL_ID,
                    photo=media_id,
                    caption=content if content else None  # –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
                )
            elif content_type == "video":
                await bot.send_video(
                    CHANNEL_ID,
                    video=media_id,
                    caption=content if content else None  # –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
                )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
            await bot.send_message(
                user_id,
                "üéâ –í–∞—à —Ç–µ–π–∫ –æ–¥–æ–±—Ä–µ–Ω! +5 –∫ —Ä–µ–π—Ç–∏–Ω–≥—É!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–π–∫–∞: {e}")
    
    await callback.message.edit_text("‚úÖ –¢–µ–π–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_take(callback: CallbackQuery):
    take_id = int(callback.data.split("_")[1])
    admin_id = callback.from_user.id
    
    update_take_status(take_id, "rejected", admin_id)
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM takes WHERE take_id = ?", (take_id,))
    user_id = cursor.fetchone()[0]
    conn.close()
    
    try:
        await bot.send_message(
            user_id,
            "‚ùå –í–∞—à —Ç–µ–π–∫ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await callback.message.edit_text("‚ùå –¢–µ–π–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

@dp.callback_query(F.data.startswith("edit_"))
async def edit_take(callback: CallbackQuery, state: FSMContext):
    take_id = int(callback.data.split("_")[1])
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT content FROM takes WHERE take_id = ?", (take_id,))
    take_content = cursor.fetchone()[0]
    conn.close()
    
    await callback.message.answer(
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Ç–µ–π–∫–∞:\n\n{take_content}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(TakeStates.waiting_for_edit)
    await state.update_data(take_id=take_id)

@dp.message(TakeStates.waiting_for_edit)
async def process_edited_take(message: Message, state: FSMContext):
    data = await state.get_data()
    take_id = data['take_id']
    admin_id = message.from_user.id
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE takes SET content = ?, status = 'accepted', admin_id = ?, rating_change = 5 WHERE take_id = ?",
        (message.text, admin_id, take_id)
    )
    
    cursor.execute('''
    UPDATE user_stats 
    SET rating = rating + 5
    WHERE user_id = (SELECT user_id FROM takes WHERE take_id = ?)
    ''', (take_id,))
    
    cursor.execute('''
    SELECT t.user_id, t.content_type, t.media_id
    FROM takes t
    WHERE t.take_id = ?
    ''', (take_id,))
    take_info = cursor.fetchone()
    conn.close()
    
    if take_info:
        user_id, content_type, media_id = take_info
        
        try:
            if content_type == "text":
                await bot.send_message(
                    CHANNEL_ID,
                    message.text
                )
            elif content_type == "photo":
                await bot.send_photo(
                    CHANNEL_ID,
                    photo=media_id,
                    caption=message.text if message.text else None
                )
            elif content_type == "video":
                await bot.send_video(
                    CHANNEL_ID,
                    video=media_id,
                    caption=message.text if message.text else None
                )
            
            await bot.send_message(
                user_id,
                "üéâ –í–∞—à –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–π–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! +5 –∫ —Ä–µ–π—Ç–∏–Ω–≥—É!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–π–∫–∞: {e}")
    
    await message.answer(
        "‚úÖ –¢–µ–π–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
        reply_markup=get_admin_menu() if admin_id in ADMIN_IDS else get_main_menu(user_id)
    )
    await state.clear()

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user_stats = get_user_stats(message.from_user.id)
    if not user_stats:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    premium_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user_stats['premium_until'] and datetime.now() < datetime.strptime(user_stats['premium_until'], "%Y-%m-%d %H:%M:%S") else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user_stats['user_id']}</code>\n"
        f"üìõ –ò–º—è: {user_stats['full_name']}\n"
        f"üåü –†–µ–π—Ç–∏–Ω–≥: {user_stats['rating']} ‚òÖ\n"
        f"üì§ –¢–µ–π–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_stats['takes_count']}\n"
        f"üíé –ü—Ä–µ–º–∏—É–º: {premium_status}\n"
    )
    
    if user_stats['premium_until'] and datetime.now() < datetime.strptime(user_stats['premium_until'], "%Y-%m-%d %H:%M:%S"):
        premium_until = datetime.strptime(user_stats['premium_until'], "%Y-%m-%d %H:%M:%S")
        profile_text += f"‚è≥ –ü—Ä–µ–º–∏—É–º –¥–æ: {premium_until.strftime('%d.%m.%Y %H:%M')}\n"
    
    profile_text += f"\nüÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_ID}"
    
    await message.answer(profile_text)

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def show_support(message: Message):
    await message.answer(
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: {SUPPORT_ID}\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!"
    )

@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def show_rating(message: Message):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT u.user_id, u.username, u.full_name, us.rating 
    FROM users u
    JOIN user_stats us ON u.user_id = us.user_id
    ORDER BY us.rating DESC
    LIMIT 10
    ''')
    top_users = cursor.fetchall()
    
    cursor.execute('''
    SELECT COUNT(*) FROM user_stats WHERE rating > 0
    ''')
    total_rated = cursor.fetchone()[0]
    conn.close()
    
    rating_text = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É</b>\n\n"
    
    for i, user in enumerate(top_users, 1):
        username = f"@{user[1]}" if user[1] else user[2]
        rating_text += f"{i}. {username}: {user[3]} ‚òÖ\n"
    
    rating_text += f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º: {total_rated}"
    
    await message.answer(rating_text)

@dp.message(F.text == "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def show_instructions(message: Message):
    instructions = (
        "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "1. <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–π–∫–æ–≤</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–π–∫' –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)\n\n"
        "2. <b>–†–µ–π—Ç–∏–Ω–≥</b>\n"
        "–ó–∞ –∫–∞–∂–¥—ã–π –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π —Ç–µ–π–∫ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +5 –∫ —Ä–µ–π—Ç–∏–Ω–≥—É\n\n"
        "3. <b>–ü—Ä–µ–º–∏—É–º</b>\n"
        "–° –ø—Ä–µ–º–∏—É–º–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ–π–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
        "4. <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
        f"–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ {SUPPORT_ID}"
    )
    await message.answer(instructions)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

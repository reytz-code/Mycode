import logging
import sqlite3
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
import secrets
from config import BOT_TOKEN, CHANNEL_USERNAME, ADMIN_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, 'bot.db')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT,
        referrals INTEGER DEFAULT 0,
        stars INTEGER DEFAULT 0,
        ref_code TEXT UNIQUE,
        referrer_id INTEGER,
        joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS promo_codes (
        code TEXT PRIMARY KEY,
        activations_left INTEGER,
        stars INTEGER,
        created_by INTEGER,
        created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS used_promo_codes (
        user_id INTEGER,
        code TEXT,
        used_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (user_id, code)
    )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        return {
            'user_id': user[0],
            'username': user[1],
            'full_name': user[2],
            'referrals': user[3],
            'stars': user[4],
            'ref_code': user[5],
            'referrer_id': user[6]
        }
    return None

def create_user(user_id, username, full_name, ref_code, referrer_id=None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
        INSERT INTO users (user_id, username, full_name, ref_code, referrer_id)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, full_name, ref_code, referrer_id))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –Ω–∞—á–∏—Å–ª—è–µ–º –µ–º—É –∑–≤—ë–∑–¥—ã
        if referrer_id:
            cursor.execute('UPDATE users SET referrals = referrals + 1, stars = stars + 2 WHERE user_id = ?', (referrer_id,))
        
        conn.commit()
    except sqlite3.IntegrityError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass
    finally:
        conn.close()

def update_user_stars(user_id, stars):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET stars = stars + ? WHERE user_id = ?', (stars, user_id))
    conn.commit()
    conn.close()

def get_promo_code(code):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM promo_codes WHERE code = ?', (code,))
    promo = cursor.fetchone()
    conn.close()
    
    if promo:
        return {
            'code': promo[0],
            'activations_left': promo[1],
            'stars': promo[2],
            'created_by': promo[3]
        }
    return None

def use_promo_code(user_id, code):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        cursor.execute('SELECT 1 FROM used_promo_codes WHERE user_id = ? AND code = ?', (user_id, code))
        if cursor.fetchone():
            return False, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
        promo = get_promo_code(code)
        if not promo:
            return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if promo['activations_left'] <= 0:
            return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        cursor.execute('UPDATE promo_codes SET activations_left = activations_left - 1 WHERE code = ?', (code,))
        cursor.execute('UPDATE users SET stars = stars + ? WHERE user_id = ?', (promo['stars'], user_id))
        cursor.execute('INSERT INTO used_promo_codes (user_id, code) VALUES (?, ?)', (user_id, code))
        
        conn.commit()
        return True, f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ {promo['stars']} –∑–≤—ë–∑–¥"
    
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}"
    finally:
        conn.close()

def create_promo_code(code, activations, stars, created_by):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
        INSERT INTO promo_codes (code, activations_left, stars, created_by)
        VALUES (?, ?, ?, ?)
        ''', (code, activations, stars, created_by))
        
        conn.commit()
        return True, "–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω"
    except sqlite3.IntegrityError:
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    finally:
        conn.close()

def is_admin(user_id):
    return user_id in ADMIN_IDS

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
def check_subscription(context, user_id):
    try:
        member = context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.CREATOR]:
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not get_user(user_id):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        ref_code = secrets.token_hex(4).upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referrer_id = None
        if context.args:
            try:
                referrer_id = int(context.args[0])
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
                if not get_user(referrer_id) or referrer_id == user_id:
                    referrer_id = None
            except ValueError:
                referrer_id = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_user(user_id, user.username, user.full_name, ref_code, referrer_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    if not check_subscription(context, user_id):
        update.message.reply_text(
            f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ])
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(update, user_id)

def show_main_menu(update: Update, user_id: int) -> None:
    keyboard = [
        [InlineKeyboardButton("‚≠êÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üí´ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="earn")],
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo")],
        [InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")]
    ]
    
    if hasattr(update, 'message') and update.message:
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        query = update.callback_query
        query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    query.answer()

    if query.data == "check_subscription":
        if check_subscription(context, user_id):
            show_main_menu(query, user_id)
        else:
            query.edit_message_text("–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
        return
    elif query.data == "profile":
        show_profile(query, user_id)
    elif query.data == "earn":
        show_earn_menu(query, user_id)
    elif query.data == "promo":
        show_promo_menu(query, user_id)
    elif query.data == "withdraw":
        handle_withdraw(query, user_id)
    elif query.data == "main_menu":
        show_main_menu(query, user_id)
    elif query.data == "enter_promo":
        query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="promo")]])
        )
    elif query.data == "create_promo":
        if is_admin(user_id):
            query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /create_promo CODE ACTIVATIONS STARS",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="promo")]])
            )
        else:
            query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

def show_profile(query, user_id: int):
    user = get_user(user_id)
    if not user:
        query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = (
        f"üë§ ID: {user['user_id']}\n"
        f"üìõ –ò–º—è: {user['full_name']}\n\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}\n"
        f"‚≠êÔ∏è –ó–≤—ë–∑–¥—ã: {user['stars']}\n"
        f"üîó –†–µ—Ñ. –∫–æ–¥: {user['ref_code']}"
    )
    
    query.edit_message_text(
        text=text, 
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    )

def show_earn_menu(query, user_id: int):
    user = get_user(user_id)
    if not user:
        query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    ref_link = f"https://t.me/{(query.bot.username)}?start={user_id}"
    
    query.edit_message_text(
        f"üí´ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã!\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 2 –∑–≤–µ–∑–¥—ã üåüüåü\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{ref_link}`",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={ref_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å%20–∫%20–Ω–∞—à–µ–º—É%20–±–æ—Ç–µ!")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    )

def show_promo_menu(query, user_id: int):
    keyboard = [
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin(user_id):
        keyboard.insert(0, [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (ADMIN)", callback_data="create_promo")])
    
    query.edit_message_text(
        "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def handle_withdraw(query, user_id: int):
    user = get_user(user_id)
    if not user:
        query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if user['stars'] >= 50:
        query.edit_message_text(
            "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for admin_id in ADMIN_IDS:
            try:
                query.bot.send_message(
                    admin_id,
                    f"üì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']} (@{user['username']})\n"
                    f"ID: {user_id}\n"
                    f"–ó–≤—ë–∑–¥: {user['stars']}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    else:
        query.edit_message_text(
            f"–í—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 50 –∑–≤—ë–∑–¥, —É –≤–∞—Å {user['stars']}.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )

def handle_message(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    user_id = user.id
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if len(text) <= 20:  # –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ
        success, message = use_promo_code(user_id, text.upper())
        update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return
    
    update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def admin_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin create_promo CODE ACTIVATIONS STARS")
        return
    
    if context.args[0] == "create_promo":
        if len(context.args) != 4:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin create_promo CODE ACTIVATIONS STARS")
            return
        
        try:
            code = context.args[1].upper()
            activations = int(context.args[2])
            stars = int(context.args[3])
            
            success, message = create_promo_code(code, activations, stars, user_id)
            update.message.reply_text(message)
        except ValueError:
            update.message.reply_text("ACTIVATIONS –∏ STARS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")

def my_id_command(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    update.message.reply_text(f"–í–∞—à ID: {user.id}")

def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ updater –∏ dispatcher
    updater = Updater(BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("admin", admin_command))
    dispatcher.add_handler(CommandHandler("my_id", my_id_command))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å long polling
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å long polling")
    updater.idle()

if __name__ == "__main__":
    main()
